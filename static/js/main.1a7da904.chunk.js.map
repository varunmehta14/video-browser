{"version":3,"sources":["components/SearchBar.js","apis/youtube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onFormSubmit","useState","term","setTerm","className","onSubmit","event","preventDefault","type","value","onChange","target","axios","create","baseURL","params","part","maxResults","key","VideoItem","video","onVideoSelect","onClick","alt","snippet","title","src","thumbnails","medium","url","VideoList","videos","renderedList","map","id","videoId","VideoDetail","width","height","frameborder","allow","allowfullscreen","description","App","setVideos","selectedVideo","setSelectedVideo","useEffect","onTermSubmit","a","youtube","get","q","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQA6BeA,EA5BC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAAgB,EACVC,mBAAS,IADC,mBACxBC,EADwB,KACnBC,EADmB,KAW9B,OACI,yBAAKC,UAAU,yBACX,0BAAMC,SARC,SAAAC,GAEXA,EAAMC,iBACNP,EAAaE,IAKgBE,UAAU,WAC/B,yBAAKA,UAAU,SACb,+CACA,2BAAOI,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACJ,GAAD,OAASH,EAAQG,EAAMK,OAAOF,c,QCjBlDG,E,OAAAA,EAAMC,OAAO,CACxBC,QAAQ,wCACRC,OAAO,CACHC,KAAK,UACLC,WAAW,EACXC,IANE,6CCWKC,G,MAVC,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,cACtB,OACE,yBAAKC,QAAS,kBAAID,EAAcD,IAAQhB,UAAU,mBAC9C,yBAAKmB,IAAKH,EAAMI,QAAQC,MAAMrB,UAAU,WAAWsB,IAAKN,EAAMI,QAAQG,WAAWC,OAAOC,MACxF,yBAAKzB,UAAU,WACX,yBAAKA,UAAU,UAAUgB,EAAMI,QAAQC,MAAvC,SCMGK,EAXC,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,OAAOV,EAAiB,EAAjBA,cAChBW,EAAcD,EAAOE,KAAI,SAAAb,GAC1B,OAAO,kBAAC,EAAD,CAAWF,IAAKE,EAAMc,GAAGC,QAAQf,MAAOA,EAAMC,cAAeA,OAGxE,OACI,6BACKW,ICUEI,EAlBG,SAAC,GAAW,IAAVhB,EAAS,EAATA,MAChB,IAAIA,EACA,OAAM,4CAGV,OACI,6BACA,yBAAKhB,UAAU,YACf,4BAAQiC,MAAM,MAAMC,OAAO,MAAMZ,IAJtB,4CAIqCa,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,KAEhL,yBAAKrC,UAAU,cACX,wBAAIA,UAAU,aAAagB,EAAMI,QAAQC,OACzC,2BAAIL,EAAMI,QAAQkB,gBC4BfC,EApCL,WAAK,IAAD,EACY1C,mBAAS,IADrB,mBACN8B,EADM,KACCa,EADD,OAE0B3C,mBAAS,MAFnC,mBAEN4C,EAFM,KAEQC,EAFR,KAIZC,qBAAU,WACRC,EAAa,kBACb,IACF,IAAMA,EAAY,uCAAC,WAAM9C,GAAN,eAAA+C,EAAA,sEACMC,EAAQC,IAAI,UAAU,CAC3CpC,OAAO,CACLqC,EAAElD,KAHW,OACXmD,EADW,OAOjBT,EAAUS,EAASC,KAAKC,OACxBT,EAAiBO,EAASC,KAAKC,MAAM,IARpB,2CAAD,sDAalB,OACE,yBAAKnD,UAAU,gBACb,kBAAC,EAAD,CAAWJ,aAAcgD,IACzB,yBAAK5C,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBAAqB,kBAAC,EAAD,CAAagB,MAAOyB,KACxD,yBAAKzC,UAAU,oBAAmB,kBAAC,EAAD,CAAW2B,OAAQA,EAAOV,cAThD,SAACD,GACnB0B,EAAiB1B,WCXDoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a7da904.chunk.js","sourcesContent":["import React,{useState}from 'react';\r\nconst SearchBar=({onFormSubmit})=>{\r\n    const[term,setTerm]=useState('');//state={term:''};\r\n    // const onInputChange=event=>{\r\n    //     setTerm(event.target.value);//this.setState({term:event.target.value});\r\n    // };\r\n    const onSubmit=event=>{\r\n       \r\n        event.preventDefault();//prevents from reloading the website on submit\r\n        onFormSubmit(term);// this.props.onFormSubmit(this.state.term);\r\n        \r\n    };\r\n    return(\r\n        <div className=\"search-bar ui segment\">\r\n            <form onSubmit={onSubmit}className=\"ui form\">\r\n                <div className=\"field\">\r\n                  <label>Video Search</label>\r\n                  <input type=\"text\"\r\n                         value={term}\r\n                         onChange={(event)=>setTerm(event.target.value)}/>\r\n                </div> \r\n            </form>\r\n            \r\n           \r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default SearchBar;","import axios from 'axios';\r\nconst KEY='AIzaSyDJLHuxIk0mLDDOOMQRGm0PDkl9NNQC6QI';\r\nexport default axios.create({\r\n    baseURL:'https://www.googleapis.com/youtube/v3',\r\n    params:{\r\n        part:'snippet',\r\n        maxResults:5,\r\n        key:KEY,\r\n        \r\n    }\r\n});\r\n","import React from 'react';\r\nimport './VideoItem.css';\r\nconst VideoItem=({video,onVideoSelect})=>{\r\n  return(\r\n    <div onClick={()=>onVideoSelect(video)} className=\"video-item item\">\r\n        <img alt={video.snippet.title}className=\"ui image\" src={video.snippet.thumbnails.medium.url}/>\r\n        <div className=\"Content\">\r\n            <div className=\"header\">{video.snippet.title} </div>\r\n        </div>   \r\n    </div>\r\n  );\r\n};\r\nexport default VideoItem;","import React from 'react';\r\nimport VideoItem from './VideoItem';\r\nconst VideoList=({videos,onVideoSelect})=>{\r\n   const renderedList= videos.map(video=>{\r\n        return <VideoItem key={video.id.videoId}video={video}onVideoSelect={onVideoSelect}/>;\r\n\r\n    });\r\n    return(\r\n        <div>\r\n            {renderedList}\r\n        </div>\r\n    );\r\n};\r\nexport default VideoList;","import React from 'react';\r\nconst VideoDetail=({video})=>{\r\n    if(!video){\r\n        return<div>Loading....</div>;\r\n    }\r\n    const videoSrc=\"https://www.youtube.com/embed/GP9gkhPclB8\"\r\n    return(\r\n        <div>\r\n        <div className=\"ui embed\">\r\n        <iframe width=\"560\" height=\"315\" src={videoSrc} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n        </div>\r\n        <div className=\"ui segment\">\r\n            <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n            <p>{video.snippet.description}</p>\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default VideoDetail;","import React,{useState, useEffect} from 'react';\nimport SearchBar from './components/SearchBar';\nimport youtube from './apis/youtube';\nimport VideoList from './components/VideoList';\nimport VideoDetail from './components/VideoDetail';\nconst App=()=>{\n  const[videos,setVideos]=useState([]);//state={videos:[],selectedVideo:null};\n  const[selectedVideo,setSelectedVideo]=useState(null);\n  \n  useEffect(()=>{                            //componentDidMount(){\n    onTermSubmit('flying beast');            //  this.onTermSubmit('flying beast')}\n  },[]);\n  const onTermSubmit=async(term)=>{\n    const response=  await youtube.get('/search',{\n      params:{\n        q:term\n      }\n      \n    });\n    setVideos(response.data.items);            //this.setState({videos:response.data.items,\n    setSelectedVideo(response.data.items[0]);  //selectedVideo:response.data.items[0]});\n  };\n  const onVideoSelect=(video)=>{\n    setSelectedVideo(video);\n  }; \n  return(\n    <div className=\"ui container\"> \n      <SearchBar onFormSubmit={onTermSubmit}/>\n      <div className=\"ui grid\">\n        <div className=\"ui row\">\n          <div className=\"eleven wide column\"><VideoDetail video={selectedVideo}/></div>\n          <div className=\"five wide column\"><VideoList videos={videos}onVideoSelect={onVideoSelect}/></div>\n      </div>\n      </div>\n    </div>\n    );\n    \n\n  };\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}